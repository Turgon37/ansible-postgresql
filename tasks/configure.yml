---
- name: "Ensure service group '{{ postgresql__service_group }}' is present"
  group:
    name:   '{{ postgresql__service_group }}'
    system: yes
    state:  present
  notify: [ 'restart-postgresql' ]

- name: "Ensure service user '{{ postgresql__service_user }}' is present"
  user:
    name:       '{{ postgresql__service_user }}'
    group:      '{{ postgresql__service_group }}'
    shell:      /bin/bash
    home:       '{{ postgresql__var_directory }}'
    comment:    PostgreSQL Server
    createhome: no
    system:     yes
    state:      present
  notify: [ 'restart-postgresql' ]

- name: Ensure the locale for lc_collate and lc_ctype is generated
  locale_gen:
    name:  '{{ item }}'
    state: present
  with_items:
    - '{{ postgresql__locale }}'
    - '{{ postgresql__ctype }}'
  when: ansible_os_family == "Debian"
  notify: [ 'restart-postgresql' ]

- name: Ensure the locale is generated
  command: "localedef -c -i {{ item.split('.')[0] }} -f {{ item.split('.')[1] }} {{ item }}"
  with_items:
    - '{{ postgresql__locale }}'
    - '{{ postgresql__ctype }}'
  when: ansible_os_family == "RedHat"
  changed_when: false

- name: Make sure the postgres data directory exists
  file:
    path:  '{{ postgresql__data_directory }}'
    owner: '{{ postgresql__service_user }}'
    group: '{{ postgresql__service_group }}'
    state: directory
    mode:  0700
  register: _postgresql__pgdata_dir_exist

- name: Check whether the postgres data directory is initialized
  stat:
    path: '{{ postgresql__data_directory }}/PG_VERSION'
  when: ansible_os_family == "RedHat"
  register: _postgresql__pgdata_dir_initialized

- name: Initialize the database
  become: yes
  become_user: "{{ postgresql__service_user }}"
  command: '{{ postgresql__bin_directory }}/initdb --pgdata={{ postgresql__data_directory }}
    --locale={{ postgresql__locale }} --encoding={{ postgresql__encoding }}'
  when: ansible_os_family == "RedHat" and (_postgresql__pgdata_dir_exist.changed or
                                            not _postgresql__pgdata_dir_initialized.stat.exists)

- name: Ensure configuration directory exists
  file:
    path:  '{{ postgresql__conf_directory }}'
    owner: '{{ postgresql__service_user }}'
    group: '{{ postgresql__service_group }}'
    mode:  0750
    state: directory

- name: Ensure configuration included directory exists
  file:
    name:  '{{ postgresql__conf_included_directory }}'
    owner: '{{ postgresql__service_user }}'
    group: '{{ postgresql__service_group }}'
    mode:  0755
    state: directory

- name: Update configuration file pg_hba.conf
  template:
    src:   pg_hba.conf.j2
    dest:  '{{ postgresql__hba_file }}'
    owner: '{{ postgresql__service_user }}'
    group: '{{ postgresql__service_group }}'
    mode:  0640
  notify: [ 'restart-postgresql' ]

- name: Update configuration file postgresql.conf
  template:
    src:   'postgresql.conf-{{ postgresql__version }}.j2'
    dest:  '{{ postgresql__conf_directory }}/postgresql.conf'
    owner: '{{ postgresql__service_user }}'
    group: '{{ postgresql__service_group }}'
    mode:  0640
  notify: [ 'restart-postgresql' ]

- name: Create symlink for postgresql.conf in data directory
  file:
    src:   '{{ postgresql__conf_directory }}/postgresql.conf'
    dest:  '{{ postgresql__data_directory }}/postgresql.conf'
    owner: '{{ postgresql__service_user }}'
    group: '{{ postgresql__service_group }}'
    force: yes
    state: link
  notify: [ 'restart-postgresql' ]

- name: Ensure the systemd directory for PostgreSQL exists
  file:
    name:  '/etc/systemd/system/{{ postgresql__service_name }}.service.d'
    mode:  0755
    state: directory
  when: ansible_service_mgr == "systemd"

- name: Define customs configurations for systemd
  template:
    src:  systemd_service.conf.j2
    dest: '/etc/systemd/system/{{ postgresql__service_name }}.service.d/custom.conf'
  when: ansible_service_mgr == "systemd"
  register: _postgresql__systemd_custom_conf

- name: Reload systemd if needed
  systemd:
    daemon_reload: yes
  when: _postgresql__systemd_custom_conf.changed

- fail:
    msg: 'Service manager other than systemd is not supported yet'
  when: ansible_service_mgr != "systemd"
