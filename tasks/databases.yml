---

- name: Ensure PostgreSQL is running
  service:
    name: '{{ postgresql_server__service_name }}'
    state: started
  tags: ['postgresql-server', 'postgresql-server-databases']


- name: Remove PUBLIC grants on databases
  become: true
  become_user: '{{ postgresql_server__admin_user }}'
  postgresql_privs:
    database: '{{ item.key }}'
    type: database
    roles: PUBLIC
    privs: ALL
    grant_option: false
    login_user: '{{ postgresql_server__admin_user }}'
    state: absent
  with_dict: '{{ postgresql_server__databases }}'
  when: item.value.state|d('present') == 'present'
  tags: ['postgresql-server', 'postgresql-server-databases']

- name: Setup PostgreSQL 'public' schema
  become: true
  become_user: '{{ postgresql_server__admin_user }}'
  postgresql_schema:
    database: '{{ item.key }}'
    name: public
    owner: '{{ item.value.owner | default(postgresql_server__database_owner) }}'
    port: '{{ postgresql_server__port }}'
    login_user: '{{ postgresql_server__admin_user }}'
    state: present
  with_dict: '{{ postgresql_server__databases }}'
  when: item.value.state|d('present') == 'present'
    and (
      item.value.schemas is not defined
      or item.value.schemas|length == 0)
  tags: ['postgresql-server', 'postgresql-server-databases']

- name: Remove PUBLIC grants on schemas
  become: true
  become_user: '{{ postgresql_server__admin_user }}'
  postgresql_privs:
    database: '{{ item.key }}'
    type: schema
    objs: public
    roles: PUBLIC
    privs: ALL
    grant_option: false
    login_user: '{{ postgresql_server__admin_user }}'
    state: absent
  with_dict: '{{ postgresql_server__databases }}'
  when: item.value.state|d('present') == 'present'
  tags: ['postgresql-server', 'postgresql-server-databases']
